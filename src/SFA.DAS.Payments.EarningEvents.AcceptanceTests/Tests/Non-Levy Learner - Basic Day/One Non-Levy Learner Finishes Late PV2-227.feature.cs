// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.EarningEvents.AcceptanceTests.Tests.Non_LevyLearner_BasicDay
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("One Non-Levy Learner Finishes Late PV2-227")]
    public partial class OneNon_LevyLearnerFinishesLatePV2_227Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "One Non-Levy Learner Finishes Late PV2-227.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "One Non-Levy Learner Finishes Late PV2-227", "Provider earnings and payments where learner completes later than planned", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A non-DAS learner, learner finishes late")]
        [NUnit.Framework.CategoryAttribute("NonDas_BasicDay")]
        [NUnit.Framework.CategoryAttribute("finishes_late")]
        public virtual void ANon_DASLearnerLearnerFinishesLate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A non-DAS learner, learner finishes late", null, new string[] {
                        "NonDas_BasicDay",
                        "finishes_late"});
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
 testRunner.Given("the current collection period is 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.And("a learner is undertaking a training with a training provider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("the payments are for the current collection year", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("the SFA contribution percentage is 90%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Periods",
                        "completion status",
                        "Total training price",
                        "Total assessment price",
                        "Balancing Payment",
                        "Aim Sequence Number",
                        "Aim Reference",
                        "Framework Code",
                        "Pathway Code",
                        "Programme Type",
                        "Funding Line Type",
                        "Episode Start Date",
                        "Learner Start Date",
                        "Number Of Installments"});
            table1.AddRow(new string[] {
                        "p1",
                        "1-12",
                        "completed",
                        "12000",
                        "3000",
                        "3000",
                        "1",
                        "ZPROG001",
                        "403",
                        "1",
                        "2",
                        "16-18 Apprenticeship (From May 2017) Non-Levy Contract (non-procured)",
                        "start of academic year",
                        "start of academic year",
                        "12"});
#line 11
 testRunner.And("the Earnings Calc has generated the following learner earnings", ((string)(null)), table1, "And ");
#line 15
 testRunner.When("the ILR is submitted and the learner earnings are sent to the earning events serv" +
                    "ice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 16
 testRunner.Then("the earning events service will generate a contract type 2 earnings event for the" +
                    " learner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Period",
                        "OnProgramme Earning Type",
                        "Amount"});
            table2.AddRow(new string[] {
                        "p1",
                        "1",
                        "Learning",
                        "1000"});
            table2.AddRow(new string[] {
                        "p1",
                        "2",
                        "Completion",
                        "3000"});
            table2.AddRow(new string[] {
                        "p1",
                        "2",
                        "Balancing",
                        "3000"});
#line 17
 testRunner.And("the earnings event will contain the following earnings", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A non-DAS learner, learner withdraws after planned end date")]
        [NUnit.Framework.CategoryAttribute("NonDas_BasicDay")]
        [NUnit.Framework.CategoryAttribute("finishes_late")]
        [NUnit.Framework.CategoryAttribute("withdrawal")]
        public virtual void ANon_DASLearnerLearnerWithdrawsAfterPlannedEndDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A non-DAS learner, learner withdraws after planned end date", null, new string[] {
                        "NonDas_BasicDay",
                        "finishes_late",
                        "withdrawal"});
#line 27
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 28
testRunner.Given("the current collection period is 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
 testRunner.And("the payments are for the current collection year", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("a learner is undertaking a training with a training provider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("the SFA contribution percentage is 90%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Periods",
                        "completion status",
                        "Total training price",
                        "Total assessment price",
                        "Aim Sequence Number",
                        "Aim Reference",
                        "Framework Code",
                        "Pathway Code",
                        "Programme Type",
                        "Funding Line Type",
                        "Episode Start Date",
                        "Learner Start Date",
                        "Number Of Installments"});
            table3.AddRow(new string[] {
                        "p1",
                        "1-12",
                        "withdrawn",
                        "9000",
                        "6000",
                        "1",
                        "ZPROG001",
                        "403",
                        "1",
                        "2",
                        "16-18 Apprenticeship (From May 2017) Non-Levy Contract (non-procured)",
                        "start of academic year",
                        "start of academic year",
                        "12"});
#line 32
 testRunner.And("the Earnings Calc has generated the following learner earnings", ((string)(null)), table3, "And ");
#line 36
 testRunner.When("the ILR is submitted and the learner earnings are sent to the earning events serv" +
                    "ice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the earning events service will generate a contract type 2 earnings event for the" +
                    " learner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Period",
                        "OnProgramme Earning Type",
                        "Amount"});
            table4.AddRow(new string[] {
                        "p1",
                        "2",
                        "Learning",
                        "1000"});
            table4.AddRow(new string[] {
                        "p1",
                        "3",
                        "Learning",
                        "1000"});
            table4.AddRow(new string[] {
                        "p1",
                        "4",
                        "Learning",
                        "1000"});
            table4.AddRow(new string[] {
                        "p1",
                        "5",
                        "Learning",
                        "1000"});
#line 38
 testRunner.And("the earnings event will contain the following earnings", ((string)(null)), table4, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
