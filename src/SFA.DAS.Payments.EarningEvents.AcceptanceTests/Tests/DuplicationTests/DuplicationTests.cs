// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.EarningEvents.AcceptanceTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Apprenticeship Contract 2 onprogramme earnings")]
    public partial class ApprenticeshipContract2OnprogrammeEarningsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Apprenticeship Contract 2 onprogramme earnings.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Apprenticeship Contract 2 onprogramme earnings", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("the current collection period is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.And("the earnings are for the current collection year", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 6
 testRunner.And("a learner is undertaking a training with a training provider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.And("the SFA contribution percentage is 90%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Periods",
                        "completion status",
                        "Total training price",
                        "Total assessment price",
                        "Aim Sequence Number",
                        "Aim Reference",
                        "Standard Code",
                        "Programme Type",
                        "Funding Line Type",
                        "Episode Start Date",
                        "Learner Start Date",
                        "Number Of Installments"});
            table11.AddRow(new string[] {
                        "p1",
                        "1-12",
                        "continuing",
                        "9000",
                        "6000",
                        "1",
                        "ZPROG001",
                        "25",
                        "25",
                        "16-18 Apprenticeship Non-Levy Contract",
                        "start of academic year",
                        "start of academic year",
                        "12"});
#line 8
 testRunner.And("the Earnings Calc has generated the following learner earnings", ((string)(null)), table11, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Contract Type 2 learner submission")]
        public virtual void ContractType2LearnerSubmission()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Contract Type 2 learner submission", null, ((string[])(null)));
#line 12
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 13
 testRunner.When("the ILR is submitted and the learner earnings are sent to the earning events serv" +
                    "ice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("the earning events service will generate a contract type 2 earnings event for the" +
                    " learner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Period",
                        "OnProgramme Earning Type",
                        "Amount"});
            table12.AddRow(new string[] {
                        "p1",
                        "1",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "2",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "3",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "4",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "5",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "6",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "7",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "8",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "9",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "10",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "11",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "12",
                        "Learning",
                        "1000"});
            table12.AddRow(new string[] {
                        "p1",
                        "12",
                        "Completion",
                        "3000"});
#line 15
 testRunner.And("the earnings event will contain the following earnings", ((string)(null)), table12, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
