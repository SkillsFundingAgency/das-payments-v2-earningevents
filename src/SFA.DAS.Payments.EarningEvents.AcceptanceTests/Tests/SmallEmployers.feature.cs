// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.EarningEvents.AcceptanceTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Small Employer")]
    public partial class SmallEmployerFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SmallEmployers.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Small Employer", "Non-DAS learner employed with a small employer, is fully funded for on programme " +
                    "and completion payments", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line 5
 testRunner.Given("the current collection period is 13", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("the payments are for the current collection year", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.And("a learner is undertaking a training with a training provider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And("the SFA contribution percentage is 100%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Periods",
                        "completion status",
                        "Total training price",
                        "Total assessment price",
                        "Aim Sequence Number",
                        "Aim Reference",
                        "Framework Code",
                        "Pathway Code",
                        "Programme Type",
                        "Funding Line Type",
                        "Episode Start Date",
                        "Learner Start Date",
                        "Number Of Installments"});
            table1.AddRow(new string[] {
                        "p1",
                        "1-12",
                        "completed",
                        "6000",
                        "1500",
                        "1",
                        "ZPROG001",
                        "403",
                        "1",
                        "2",
                        "16-18 Apprenticeship (From May 2017) Non-Levy Contract (non-procured)",
                        "start of academic year",
                        "start of academic year",
                        "12"});
#line 10
 testRunner.And("the Earnings Calc has generated the following learner earnings", ((string)(null)), table1, "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AC1-Payment for a 16-18 non-DAS learner, small employer at start")]
        [NUnit.Framework.CategoryAttribute("SmallEmployerNonDas")]
        public virtual void AC1_PaymentForA16_18Non_DASLearnerSmallEmployerAtStart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC1-Payment for a 16-18 non-DAS learner, small employer at start", null, new string[] {
                        "SmallEmployerNonDas"});
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 17
 testRunner.When("the ILR is submitted and the learner earnings are sent to the earning events serv" +
                    "ice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the earning events service will generate a contract type 2 earnings event for the" +
                    " learner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Period",
                        "OnProgramme Earning Type",
                        "Amount"});
            table2.AddRow(new string[] {
                        "p1",
                        "1",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "2",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "3",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "4",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "5",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "6",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "7",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "8",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "9",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "10",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "11",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "12",
                        "Learning",
                        "500"});
            table2.AddRow(new string[] {
                        "p1",
                        "12",
                        "Completion",
                        "1500"});
#line 19
 testRunner.And("the earnings event will contain the following earnings", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AC5- Payment for a 16-18 non-DAS learner, employer is not small")]
        public virtual void AC5_PaymentForA16_18Non_DASLearnerEmployerIsNotSmall()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AC5- Payment for a 16-18 non-DAS learner, employer is not small", null, ((string[])(null)));
#line 35
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 4
this.FeatureBackground();
#line 36
 testRunner.When("the ILR is submitted and the learner earnings are sent to the earning events serv" +
                    "ice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("the earning events service will generate a contract type 2 earnings event for the" +
                    " learner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Price Episode Identifier",
                        "Period",
                        "OnProgramme Earning Type",
                        "Amount"});
            table3.AddRow(new string[] {
                        "p1",
                        "1",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "2",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "3",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "4",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "5",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "6",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "7",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "8",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "9",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "10",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "11",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "12",
                        "Learning",
                        "500"});
            table3.AddRow(new string[] {
                        "p1",
                        "12",
                        "Completion",
                        "1500"});
#line 38
 testRunner.And("the earnings event will contain the following earnings", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
